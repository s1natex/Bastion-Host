#!/bin/bash

set -ex

# Install deps on Amazon Linux 2
amazon-linux-extras install epel -y
yum update -y
yum install -y aws-cli openvpn easy-rsa iptables-services

systemctl enable iptables

INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

aws ec2 associate-address \
  --instance-id "$${INSTANCE_ID}" \
  --allocation-id "${eip_alloc_id}" \
  --region "${region}"

MARKER_FILE="/etc/openvpn/.configured"
S3_BUCKET="${bucket}"
BACKUP_PATH="openvpn-config"
CONFIG_DIR="/etc/openvpn"

mkdir -p "$${CONFIG_DIR}"

# Try to pull the marker from S3 (if exists, we are in restore mode)
aws s3 cp "s3://$${S3_BUCKET}/$${BACKUP_PATH}/.configured" "$${MARKER_FILE}" || echo "OpenVPN is not configured"

if [ ! -f "$${MARKER_FILE}" ]; then
  echo "First run detected. Setting up OpenVPN fresh."

  mkdir -p /etc/openvpn/easy-rsa
  cp -r /usr/share/easy-rsa/3/* /etc/openvpn/easy-rsa
  cd /etc/openvpn/easy-rsa

  ./easyrsa init-pki
  export EASYRSA_BATCH=1

  echo | ./easyrsa build-ca nopass
  ./easyrsa gen-dh

  ./easyrsa gen-req server nopass
  echo "yes" | ./easyrsa sign-req server server

  ./easyrsa gen-req client nopass
  echo "yes" | ./easyrsa sign-req client client

  openvpn --genkey --secret /etc/openvpn/ta.key

  mv pki/ca.crt \
     pki/dh.pem \
     pki/private/server.key \
     pki/private/client.key \
     pki/issued/server.crt \
     pki/issued/client.crt \
     /etc/openvpn/

  cat > /etc/openvpn/server.conf <<EOF
port 1194
proto udp
server 10.8.0.0 255.255.255.0
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
tls-server
tls-auth ta.key 0
cipher AES-256-CBC
auth SHA512
keepalive 10 120
persist-key
persist-tun
status openvpn-status.log
log-append /var/log/openvpn.log
verb 3
push "route ${vpc_net} ${vpc_mask}"
${push_routes}
${simultaneous_connections}
EOF

  BASTION_PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)

  cat > /etc/openvpn/client.ovpn <<EOF
client
dev tun
proto udp
remote $${BASTION_PUBLIC_IP} 1194
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-CBC
auth SHA512
key-direction 1
verb 3
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(sed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/client.crt)
</cert>
<key>
$(cat /etc/openvpn/client.key)
</key>
<tls-auth>
$(cat /etc/openvpn/ta.key)
</tls-auth>
EOF

  # Mark configured and back up to S3
  touch "$${MARKER_FILE}"

  echo "Backing up OpenVPN configuration to S3"
  aws s3 cp "$${CONFIG_DIR}" "s3://$${S3_BUCKET}/$${BACKUP_PATH}" --recursive

else
  echo "OpenVPN already configured previously. Restoring from S3 backup."

  aws s3 sync "s3://$${S3_BUCKET}/$${BACKUP_PATH}" "$${CONFIG_DIR}"

  chmod -R 600 /etc/openvpn/*
fi

# At this point, either we just generated /etc/openvpn/client.ovpn,
# or we restored it from S3. In both cases, make sure it's available for download
# and upload it (again) to S3 in a known path.

if [ -f "/etc/openvpn/client.ovpn" ]; then
  cp /etc/openvpn/client.ovpn /home/ec2-user/client.ovpn || true
  chown ec2-user:ec2-user /home/ec2-user/client.ovpn || true
  chmod 600 /home/ec2-user/client.ovpn || true

  # also push a standalone copy to S3 so operator can pull without SSH
  aws s3 cp /etc/openvpn/client.ovpn "s3://$${S3_BUCKET}/$${BACKUP_PATH}/client.ovpn" || true
fi

# Enable IP forwarding persistently
if ! grep -q "net.ipv4.ip_forward=1" /etc/sysctl.conf; then
  echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
fi
sysctl -p

# Determine default outbound NIC
OUT_IFACE=$(ls /sys/class/net | grep -Ev "lo|tun" | head -n1)

iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o "$${OUT_IFACE}" -j MASQUERADE
iptables-save > /etc/sysconfig/iptables

systemctl enable iptables --now
systemctl enable openvpn@server --now

echo "OpenVPN bastion ready.
Client config: /home/ec2-user/client.ovpn
Alternate download (no SSH needed):
  aws s3 cp s3://$${S3_BUCKET}/$${BACKUP_PATH}/client.ovpn ./client.ovpn

To connect from your machine:
  sudo openvpn --config client.ovpn

Then SSH to the private host via its private IP.
" > /etc/motd
